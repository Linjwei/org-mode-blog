#+TITLE: Blogging with Org mode
#+DATE: 2014-01-05
#+DESCRIPTION: How I use Emacs Org mode as a blogging tool. It's a bit a pain to set it up, but once it works it's great because writing with Org mode is great...
#+KEYWORDS: org-mode org emacs blogging

I was fed up with all the blogging tools I had used so far. I really wanted to use Emacs and Org mode to blog so I looked at some of the options listed on the [[http://orgmode.org/worg/org-blog-wiki.html][Org mode homepage]] like =o-blog= or =blog-files=. For me this was much too complicated. I didn't want to use external tools nor get too fancy like =o-blog=. It should just be a plain Org mode export.

I had to learn how to use the Org html exporter properly and I started by reading the [[http://orgmode.org/manual/Publishing.html][Org manual section on Publishing]].

*I use Org >= 8.0 with the new exporting system and don't know if this works with older versions too*

The source code for this project [[https://github.com/steckerhalter/org-mode-blog][is available on Github.]]

* Project setup

The first thing you need is to define a project that the export function will use:

#+INCLUDE: "../elisp/org-mode-blog-setup.el" src emacs-lisp

After having set the =org-publish-project-alist= variable I define a function =org-mode-blog-preamble= that gets the content for the preamble (the sidebar) from the file [[https://github.com/steckerhalter/org-mode-blog/blob/master/html/preamble.html][preamble.html (source on Github)]]. 

To generate an RSS feed I use =blog-rss=. It depends on the exporter backend =ox-rss.el= from org-contrib. I use [[https://github.com/quelpa/quelpa][quelpa]] to include the contrib stuff (which also contains =htmlize=):

#+BEGIN_SRC emacs-lisp
(let ((quelpa-upgrade-p (not (require 'htmlize nil t))))
  (quelpa '(org :url "git://orgmode.org/org-mode.git" :fetcher git
                :files ("lisp/*.el" "contrib/lisp/*.el" "doc/dir" "doc/*.texi"))))
#+END_SRC

I use the /preparation-function/ =org-mode-blog-prepare= (which is run before every export) to "touch" =index.org=. The index-file itself is almost never changed but it needs to reflect the changes made in the posts. By updating the modified date of the file I'm ensuring that it will always be published.

Having defined all of that it's possible to use =org-publish-all= to export the blog to html.

The destination is the =:publishing-directory= which is read from the variable =org-mode-blog-publishing-directory= which has to be set beforehand. It can be a local directory like =~/public_html= or a remote location like =/ssh:user@server:directory=.

The file tree in the base directory looks something like this:

#+BEGIN_SRC text
blog
├── css
│   ├── bootstrap.css
│   ├── darkstrap.css
│   └── style.css
├── index.org
├── posts
│   └── blogging-with-org-mode.org
└── sitemap.org
#+END_SRC

The sitemap is auto-generated because above we used =:auto-sitemap t=.

* Creating a posts index on the homepage

I would like to aggregate the posts and make a list with the title as a link, the description and the last update. The information has to be parsed out of the posts.

** Retrieving the environment

To get the title, description and other properties from the file...

#+BEGIN_SRC org
,#+TITLE: Blogging with Org mode
,#+DESCRIPTION: How I use Emacs Org mode as a blogging tool (not done with that yet :)
,#+KEYWORDS: org-mode org emacs blogging
#+END_SRC

...we can use =org-export-get-environment=:

#+BEGIN_SRC emacs-lisp :results raw
  (org-combine-plists (org-babel-with-temp-filebuffer (buffer-file-name) (org-export-get-environment)))
#+END_SRC

gives something like this:

#+BEGIN_SRC emacs-lisp
(:author nil :creator Emacs 24.3.50.1 (Org mode 8.2.4) :email user@example.com :exclude-tags (noexport) :headline-levels 3 :language en :preserve-breaks nil :section-numbers t :select-tags (export) :time-stamp-file t :with-archived-trees headline :with-author t :with-clocks nil :with-creator comment :with-date t :with-drawers (not LOGBOOK) :with-email nil :with-emphasize t :with-entities t :with-fixed-width t :with-footnotes t :with-inlinetasks t :with-latex t :with-planning nil :with-priority nil :with-smart-quotes nil :with-special-strings t :with-statistics-cookies t :with-sub-superscript t :with-toc t :with-tables t :with-tags t :with-tasks t :with-timestamps t :with-todo-keywords t :title (Blogging with Org mode) :date (2012-12-15) :description How I use Emacs Org mode as a blogging tool (not done with that yet :) :keywords org-mode org emacs blogging :back-end nil :translate-alist nil :footnote-definition-alist nil :id-alist nil)
#+END_SRC

** Generate the posts index

A code block in =index.org= which is included from the Elisp source [[https://github.com/steckerhalter/org-mode-blog/blob/master/elisp/index.el][index.el (source on Github)]] is used to parse all the files:

#+INCLUDE: "../elisp/index.el" src emacs-lisp

After having retrieved the environment I add the file path and the file's date to each entry and assemble them in =entries=. Then I sort the entries based on the date so that the last modified entry is on top and run =dolist= on the result to format the data for Org output.

On an Org mode export the output of the Elisp code is written directly into the buffer in Org syntax which is then used to create the html.

* Enabling comments

Since the generated html is static we need to use a standalone comments solution. There are services like Disqus but I really don't want ads and no control over my content. [[https://github.com/phusion/juvia][Juvia]] is perfect for that use case:

#+BEGIN_QUOTE
Juvia is an open source commenting system. It allows you to outsource your commenting needs to an external system so that you don't have to build your own commenting system for each website or each web app. Embedding a Juvia commenting page only involves pasting a JavaScript snippet into your web page.
#+END_QUOTE

I'm adding the necessary Javascript to =:html-head-extra=:

#+BEGIN_SRC emacs-lisp
:html-head-extra "<script async src=\"/js/juvia.js\"></script>"
#+END_SRC

and =:html-postamble= contains the CSS element:

#+BEGIN_SRC emacs-lisp
:html-postamble "<hr><div id='comments'></div>"
#+END_SRC

That's all there is to do in the frontend.

For the server side setup see my post [[file:disqus-like-blog-comments-with-juvia.org][Disqus-like blog comments with Juvia]].
