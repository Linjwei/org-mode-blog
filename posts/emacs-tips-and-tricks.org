#+TITLE: Emacs Tips and Tricks
#+DESCRIPTION: I'm gathering all the cool tricks that I find out about Emacs in this post (mostly for myself because I keep forgetting them again :)...
#+KEYWORDS: emacs tips tricks

* Emacs startup

** Init files

Before the personal init file (=~/.emacs=, =~/.emacs.el=, or =~/.emacs.d/init.el=) Emacs loads the site lisp and startup files =site-lisp.el= and =site-start.el=, if found.

If you install Emacs with a package manager usually the distribution (e.g. Debian) loads additional libraries via =site-lisp.el= for all users that start Emacs.

Emacs searches the default =load-path= for these files which could look like this:

#+BEGIN_EXAMPLE
/usr/local/share/emacs/24.3.50/lisp
/usr/local/share/emacs/24.3.50/lisp/vc
/usr/local/share/emacs/24.3.50/lisp/url
...
#+END_EXAMPLE

There are some Emacs command line that affect this behavior;

#+BEGIN_EXAMPLE
--no-site-file              do not load site-start.el
--no-site-lisp, -nsl        do not add site-lisp directories to load-path
--quick, -Q                 equivalent to: -q --no-site-file --no-site-lisp --no-splash
--no-init-file, -q          load neither ~/.emacs nor default.el
#+END_EXAMPLE

To debug issues with your personal init file usually =-Q= is a good choice to see if the issue is also present without your customizations.

After the site files and the personal init file, =default.el= is loaded. It's possible to use this file for customizations that should happen at the end of the init process.

If for example you add =~/.emacs.d/elisp= to the load-path in =~/.emacs=:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp/")
#+END_SRC

You could put =default.el= into that directory and it should get loaded after your init file.

** Maximized frames (Emacs 24.4)

To get Emacs to maximize the frame on startup and for newly created frames you can use the new value =maximized= for the frame-alist parameter =fullscreen=. Your Emacs init file could contain:

#+BEGIN_SRC emacs-lisp
  (modify-all-frames-parameters '((fullscreen . maximized)))
#+END_SRC

which would maximize the startup frame and also ensure that all future frames are maximized by modifying =default-frame-alist=.

*** New command-line option

There has been added a new command-line option =-mm= or =--maximized= which maximizes the initial frame.

*** Toggling the current frame

The maximization state of the current frame can later be toggled with =ESC <f10>= or =M-x toggle-frame-maximized=. 

* Useful external resources

** EmacsWiki

*** [[http://www.emacswiki.org/emacs/ElispCookbook][Elisp Cookbook]]

#+BEGIN_QUOTE
This page contains snippets of code that demonstrate basic EmacsLisp programming operations in the spirit of the O’Reilly cookbook series of books. For every task addressed, a worked-out solution is presented as a short, focused, directly usable piece of code.

All this stuff can be found elsewhere, but it is scattered about in libraries, manuals, etc. It would be helpful to have here in one spot.
#+END_QUOTE

*** [[http://www.emacswiki.org/emacs/EmacsNiftyTricks][EmacsNiftyTricks]]

#+BEGIN_QUOTE
Some programmers are enormously productive using Emacs. Their hands seem to quickly run over the keyboard accomplishing things in minutes that it takes others hours to accomplish. They must know many Emacs tricks which allow them to work rapidly. If asked, they are hesitant to show their tricks. Understandably so, it would probably take many hours for them to show me all their tricks.

This web page describes all their little tricks for using Emacs effectively.
#+END_QUOTE

* Finding stuff

** Helm

[[https://github.com/emacs-helm/helm][Emacs Helm]] is the most useful helper to query all kinds of resources for something that you might want to look up. For in-depth Helm information see my post [[file:emacs-helm-know-how.org][Emacs Helm Know How]].

I'm also going to list my custom bindings to the appropriate Helm commands here.

| my shortcut | shortcut    | command             | description                                                           |
|-------------+-------------+---------------------+-----------------------------------------------------------------------|
| C-h ,       | =C-x c a=   | helm-apropos        | Describe commands, functions, variables and faces                     |
| =C-h .=     | =C-x c h r= | helm-info-emacs     | Emacs info manual: find out how to do something with Emacs            |
| =C-h 4=     |             | helm-info-elisp     | Elisp info manual: great to lookup information when programming Elisp |
| =C-h 3=     |             | helm-locate-library | Quick way of getting to the elisp source of a library                 |
| =C-h C-l=   |             | helm-locate         | Great way of using UNIX =locate= command to find files anywhere       |

For commands with multiple sources like =helm-apropos=, press =C-o= to get the next source. Often Helm binds multiple Actions to a command. Press =TAB= to choose an action. =RET= on an entry uses the first action.

For example =helm-apropos= has three Actions for =Commands=:

- Describe Function: Display the full documentation of FUNCTION (a symbol).
- Find Function: Finds the source file containing the definition of the function near point
- Info Lookup: Find the command in the Info manual

I especially encourage you to use =helm-locate-library=, I have already discovered valuable libraries that are part of Emacs which I probably would have never known about.

** Built-in

| =C-u C-x ==  | Print info (like faces etc.) on cursor position (on screen and within buffer) in Help buffer. | =what-cursor-position= |

* Get back to where you were (Recursive Edit)

For example, when replacing some text with =M-%= or =M-C-%= you can replace and edit the matches with =C-w= or just edit with =C-r= to touch up some of the entries you are replacing along the way when they are a special case. When you're done you punch =C-M-c= and you snap back into =query-replace= or =query-replace-regexp=. You can even change buffers or visit other files – almost anything.

* Navigating

Use =C-SPC= to set the mark, and =C-x C-x= to go back. A nice but often unknown feature is using universal argument: =C-u C-SPC=. It’s an easy way to navigate back to your previous editing spots by jumping to the positions stored in the buffer’s local mark ring. Repeated calls will cycle through the ring of marks.

* Deleting whitespace

| =M-\=     | Delete spaces and tabs around point                                                                                                                             | =delete-horizontal-space= |
| =M-<SPC>= | Delete spaces and tabs around point, leaving one space                                                                                                          | =just-one-space=          |
| =C-x C-o= | Delete blank lines around the current line                                                                                                                      | =delete-blank-lines=      |
| =M-^=     | Join two lines by deleting the intervening newline, along with any indentation following it. With a prefix (=C-u M-^=) it joins the current with the next line. | =delete-indentation=      |

* Marking

| =M-@=     | Set mark after end of next word.  This does not move point.                    | =mark-word=             |
| =C-M-@=   | Set mark after end of following balanced expression. This does not move point. | =mark-sexp=             |
| =M-h=     | Move point to the beginning of the current paragraph, and set mark at the end. | =mark-paragraph=        |
| =C-M-h=   | Move point to the beginning of the current defun, and set mark at the end.     | =mark-defun=            |
| =C-x h=   | Move point to the beginning of the buffer, and set mark at the end.            | =mark-whole-buffer=     |
| =C-x SPC= | Makes a rectangular region (new in Emacs 24.4)                                 | =rectangular-mark-mode= |

* Killing

| =C-S-backspace= | Kill an entire line at once.                    | =kill-whole-line=        |
| =M-<DEL>=       | (Also =<C-backspace>=) Kill one word backwards. | =backward-kill-word=     |
| =C-x <DEL>=     | Kill back to beginning of sentence.             | =backward-kill-sentence= |
| =C-M-k=         | Kill the following balanced expression.         | =kill-sexp=              |
| =M-z CHAR=      | Kill through the next occurrence of CHAR.       | =zap-to-char=            |

* Yanking

| =C-u C-y= | Yanks like =C-y= but leaves the cursor in front of the inserted text, and sets the mark at the end. | =yank= |

* Searching

When doing isearch, =C-w= adds the word following point to the search buffer. But even better with Emacs 24.4 there is =M-s .= to do the same thing in one go.
